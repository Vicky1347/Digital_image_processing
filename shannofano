function shannon_fano_image_compression(image_path)
    % Read the image
    % img = imread(image_path);
    img=imread('lila52.jpeg');
    if size(img, 3) == 3
        img = rgb2gray(img);  % Convert to grayscale if RGB
    end
    
    % Display original image
    figure;
    subplot(1,2,1);
    imshow(img);
    title('Original Image');
    
    % Flatten the image matrix to a 1D array
    img_vector = img(:);
    
    % Compute probability of each pixel value
    [counts, intensity] = histcounts(img_vector, 0:256);
    probs = counts / sum(counts);
    
    % Remove zero probabilities
    valid_idx = probs > 0;
    probs = probs(valid_idx);
    intensity = intensity(valid_idx);
    
    % Generate Shannon-Fano codes
    codes = shannon_fano_recursive(probs, "");
    
    % Display Shannon-Fano codes for each intensity level
    disp("Shannon-Fano Codes:");
    for i = 1:length(intensity)
        fprintf("Intensity: %d -> Code: %s\n", intensity(i), codes{i});
    end
    
    % Display compressed image (simulated by mapping intensities to codes)
    compressed_img = arrayfun(@(x) find(intensity == x, 1), img);
    subplot(1,2,2);
    imshow(uint8(compressed_img * (255 / max(compressed_img(:)))));
    title('Compressed Image (Simulated)');
end

function codes = shannon_fano_recursive(probs, prefix)
    n = length(probs);
    codes = cell(n, 1);
    
    if n == 1
        codes{1} = prefix;
        return;
    end
    
    % Sort probabilities in descending order
    [probs, idx] = sort(probs, 'descend');
    
    % Find split point
    total = sum(probs);
    half_total = 0;
    split = 0;
    for i = 1:n
        half_total = half_total + probs(i);
        if half_total >= total / 2
            split = i;
            break;
        end
    end
    
    % Assign codes
    left_codes = shannon_fano_recursive(probs(1:split), [prefix, '0']);
    right_codes = shannon_fano_recursive(probs(split+1:end), [prefix, '1']);
    
    % Reorder codes according to original indices
    codes(idx(1:split)) = left_codes;
    codes(idx(split+1:end)) = right_codes;
end

